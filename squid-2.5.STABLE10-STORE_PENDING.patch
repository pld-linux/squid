Index: squid/src/cache_manager.c
diff -c squid/src/cache_manager.c:1.26.2.1 squid/src/cache_manager.c:1.26.2.2
*** squid/src/cache_manager.c:1.26.2.1	Thu Sep  1 16:14:45 2005
--- squid/src/cache_manager.c	Thu Sep  1 16:42:03 2005
***************
*** 251,258 ****
      /* retrieve object requested */
      a = cachemgrFindAction(mgr->action);
      assert(a != NULL);
!     if (a->flags.atomic)
! 	storeBuffer(entry);
      {
  	http_version_t version;
  	HttpReply *rep = entry->mem_obj->reply;
--- 251,257 ----
      /* retrieve object requested */
      a = cachemgrFindAction(mgr->action);
      assert(a != NULL);
!     storeBuffer(entry);
      {
  	http_version_t version;
  	HttpReply *rep = entry->mem_obj->reply;
***************
*** 270,279 ****
  	httpReplySwapOut(rep, entry);
      }
      a->handler(entry);
!     if (a->flags.atomic) {
! 	storeBufferFlush(entry);
  	storeComplete(entry);
-     }
      cachemgrStateFree(mgr);
  }
  
--- 269,277 ----
  	httpReplySwapOut(rep, entry);
      }
      a->handler(entry);
!     storeBufferFlush(entry);
!     if (a->flags.atomic)
  	storeComplete(entry);
      cachemgrStateFree(mgr);
  }
  
Index: squid/src/ftp.c
diff -c squid/src/ftp.c:1.316.2.30 squid/src/ftp.c:1.316.2.31
*** squid/src/ftp.c:1.316.2.30	Thu Sep  1 16:28:29 2005
--- squid/src/ftp.c	Thu Sep  1 16:42:03 2005
***************
*** 369,375 ****
      char *dirup;
      int i, j, k;
      const char *title = strBuf(ftpState->title_url);
-     storeBuffer(e);
      storeAppendPrintf(e, "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      storeAppendPrintf(e, "<!-- HTML listing generated by Squid %s -->\n",
  	version_string);
--- 369,374 ----
***************
*** 429,435 ****
      storeAppendPrintf(e, "<PRE>\n");
      dirup = ftpHtmlifyListEntry("<internal-dirup>", ftpState);
      storeAppend(e, dirup, strlen(dirup));
-     storeBufferFlush(e);
      ftpState->flags.html_header_sent = 1;
  }
  
--- 428,433 ----
***************
*** 437,443 ****
  ftpListingFinish(FtpStateData * ftpState)
  {
      StoreEntry *e = ftpState->entry;
-     storeBuffer(e);
      storeAppendPrintf(e, "</PRE>\n");
      if (ftpState->flags.listformat_unknown && !ftpState->flags.tried_nlst) {
  	storeAppendPrintf(e, "<A HREF=\"%s/;type=d\">[As plain directory]</A>\n",
--- 435,440 ----
***************
*** 453,459 ****
  	getMyHostname(),
  	full_appname_string);
      storeAppendPrintf(e, "</ADDRESS></BODY></HTML>\n");
-     storeBufferFlush(e);
  }
  
  static const char *Month[] =
--- 450,455 ----
***************
*** 869,875 ****
      debug(9, 3) ("ftpParseListing: %d bytes to play with\n", (int) len);
      line = memAllocate(MEM_4K_BUF);
      end++;
!     storeBuffer(e);
      s = sbuf;
      s += strspn(s, crlf);
      for (; s < end; s += strcspn(s, crlf), s += strspn(s, crlf)) {
--- 865,871 ----
      debug(9, 3) ("ftpParseListing: %d bytes to play with\n", (int) len);
      line = memAllocate(MEM_4K_BUF);
      end++;
!     storeBuffer(e);		/* released when done processing current data payload */
      s = sbuf;
      s += strspn(s, crlf);
      for (; s < end; s += strcspn(s, crlf), s += strspn(s, crlf)) {
***************
*** 887,893 ****
  	assert(t != NULL);
  	storeAppend(e, t, strlen(t));
      }
-     storeBufferFlush(e);
      assert(usable <= len);
      if (usable < len) {
  	/* must copy partial line to beginning of buf */
--- 883,888 ----
***************
*** 992,997 ****
--- 987,993 ----
  	    storeAppend(entry, ftpState->data.buf, len);
  	    ftpState->data.offset = 0;
  	}
+ 	storeBufferFlush(entry);
  	commSetSelect(fd,
  	    COMM_SELECT_READ,
  	    ftpDataRead,
***************
*** 2544,2550 ****
      else
  	err->ftp.reply = xstrdup("");
      errorAppendEntry(ftpState->entry, err);
-     storeBufferFlush(ftpState->entry);
      ftpSendQuit(ftpState);
  }
  
--- 2540,2545 ----
***************
*** 2565,2570 ****
--- 2560,2566 ----
      ftpState->flags.http_header_sent = 1;
      assert(e->mem_obj->inmem_hi == 0);
      EBIT_CLR(e->flags, ENTRY_FWD_HDR_WAIT);
+     storeBuffer(e);		/* released when done processing current data payload */
      filename = (t = strRChr(urlpath, '/')) ? t + 1 : strBuf(urlpath);
      if (ftpState->flags.isdir) {
  	mime_type = "text/html";
***************
*** 2583,2589 ****
  	    break;
  	}
      }
-     storeBuffer(e);
      httpReplyReset(reply);
      /* set standard stuff */
      if (ftpState->restarted_offset) {
--- 2579,2584 ----
***************
*** 2605,2611 ****
      if (mime_enc)
  	httpHeaderPutStr(&reply->header, HDR_CONTENT_ENCODING, mime_enc);
      httpReplySwapOut(reply, e);
-     storeBufferFlush(e);
      reply->hdr_sz = e->mem_obj->inmem_hi;
      storeTimestampsSet(e);
      if (ftpState->flags.authenticated) {
--- 2600,2605 ----
Index: squid/src/gopher.c
diff -c squid/src/gopher.c:1.162.2.9 squid/src/gopher.c:1.162.2.10
*** squid/src/gopher.c:1.162.2.9	Thu Sep  1 16:14:45 2005
--- squid/src/gopher.c	Thu Sep  1 16:42:03 2005
***************
*** 721,749 ****
       * OK. We successfully reach remote site.  Start MIME typing
       * stuff.  Do it anyway even though request is not HTML type.
       */
      gopherMimeCreate(gopherState);
      switch (gopherState->type_id) {
      case GOPHER_DIRECTORY:
  	/* we got to convert it first */
- 	storeBuffer(entry);
  	gopherState->conversion = HTML_DIR;
  	gopherState->HTML_header_added = 0;
  	break;
      case GOPHER_INDEX:
  	/* we got to convert it first */
- 	storeBuffer(entry);
  	gopherState->conversion = HTML_INDEX_RESULT;
  	gopherState->HTML_header_added = 0;
  	break;
      case GOPHER_CSO:
  	/* we got to convert it first */
- 	storeBuffer(entry);
  	gopherState->conversion = HTML_CSO_RESULT;
  	gopherState->cso_recno = 0;
  	gopherState->HTML_header_added = 0;
  	break;
      default:
  	gopherState->conversion = NORMAL;
      }
      /* Schedule read reply. */
      commSetSelect(fd, COMM_SELECT_READ, gopherReadReply, gopherState, 0);
--- 721,748 ----
       * OK. We successfully reach remote site.  Start MIME typing
       * stuff.  Do it anyway even though request is not HTML type.
       */
+     storeBuffer(entry);
      gopherMimeCreate(gopherState);
      switch (gopherState->type_id) {
      case GOPHER_DIRECTORY:
  	/* we got to convert it first */
  	gopherState->conversion = HTML_DIR;
  	gopherState->HTML_header_added = 0;
  	break;
      case GOPHER_INDEX:
  	/* we got to convert it first */
  	gopherState->conversion = HTML_INDEX_RESULT;
  	gopherState->HTML_header_added = 0;
  	break;
      case GOPHER_CSO:
  	/* we got to convert it first */
  	gopherState->conversion = HTML_CSO_RESULT;
  	gopherState->cso_recno = 0;
  	gopherState->HTML_header_added = 0;
  	break;
      default:
  	gopherState->conversion = NORMAL;
+ 	storeBufferFlush(entry);
      }
      /* Schedule read reply. */
      commSetSelect(fd, COMM_SELECT_READ, gopherReadReply, gopherState, 0);
Index: squid/src/store.c
diff -c squid/src/store.c:1.544.2.8 squid/src/store.c:1.544.2.9
*** squid/src/store.c:1.544.2.8	Fri Mar 25 19:50:53 2005
--- squid/src/store.c	Thu Sep  1 16:42:03 2005
***************
*** 1232,1240 ****
  void
  storeBufferFlush(StoreEntry * e)
  {
!     EBIT_CLR(e->flags, DELAY_SENDING);
!     InvokeHandlers(e);
!     storeSwapOut(e);
  }
  
  squid_off_t
--- 1232,1242 ----
  void
  storeBufferFlush(StoreEntry * e)
  {
!     if (EBIT_TEST(e->flags, DELAY_SENDING)) {
! 	EBIT_CLR(e->flags, DELAY_SENDING);
! 	InvokeHandlers(e);
! 	storeSwapOut(e);
!     }
  }
  
  squid_off_t
Index: squid/src/whois.c
diff -c squid/src/whois.c:1.16.2.1 squid/src/whois.c:1.16.2.2
*** squid/src/whois.c:1.16.2.1	Thu Sep  1 16:14:45 2005
--- squid/src/whois.c	Thu Sep  1 16:42:03 2005
***************
*** 97,108 ****
      debug(75, 3) ("whoisReadReply: FD %d read %d bytes\n", fd, len);
      debug(75, 5) ("{%s}\n", buf);
      if (len > 0) {
! 	if (0 == mem->inmem_hi)
! 	    mem->reply->sline.status = HTTP_OK;
  	fd_bytes(fd, len, FD_READ);
  	kb_incr(&statCounter.server.all.kbytes_in, len);
  	kb_incr(&statCounter.server.http.kbytes_in, len);
  	storeAppend(entry, buf, len);
  	commSetSelect(fd, COMM_SELECT_READ, whoisReadReply, p, Config.Timeout.read);
      } else if (len < 0) {
  	debug(50, 2) ("whoisReadReply: FD %d: read failure: %s.\n",
--- 97,115 ----
      debug(75, 3) ("whoisReadReply: FD %d read %d bytes\n", fd, len);
      debug(75, 5) ("{%s}\n", buf);
      if (len > 0) {
! 	if (0 == mem->inmem_hi) {
! 	    http_reply *reply = mem->reply;
! 	    http_version_t version;
! 	    storeBuffer(entry);
! 	    httpBuildVersion(&version, 1, 0);
! 	    httpReplySetHeaders(reply, version, HTTP_OK, "Gatewaying", "text/plain", -1, -1, -2);
! 	    httpReplySwapOut(reply, entry);
! 	}
  	fd_bytes(fd, len, FD_READ);
  	kb_incr(&statCounter.server.all.kbytes_in, len);
  	kb_incr(&statCounter.server.http.kbytes_in, len);
  	storeAppend(entry, buf, len);
+ 	storeBufferFlush(entry);
  	commSetSelect(fd, COMM_SELECT_READ, whoisReadReply, p, Config.Timeout.read);
      } else if (len < 0) {
  	debug(50, 2) ("whoisReadReply: FD %d: read failure: %s.\n",
