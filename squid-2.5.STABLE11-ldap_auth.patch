Index: squid/helpers/basic_auth/LDAP/squid_ldap_auth.8
diff -c squid/helpers/basic_auth/LDAP/squid_ldap_auth.8:1.7.2.9 squid/helpers/basic_auth/LDAP/squid_ldap_auth.8:1.7.2.10
*** squid/helpers/basic_auth/LDAP/squid_ldap_auth.8:1.7.2.9	Sun Jan 30 12:28:56 2005
--- squid/helpers/basic_auth/LDAP/squid_ldap_auth.8	Wed Sep 28 12:33:42 2005
***************
*** 199,205 ****
  a user DN and password to log in as to perform the searches, as in the
  following complex Active Directory example
  .IP
! squid_ldap_auth -p -R -b "dc=your,dc=domain" -D "cn=squid,cn=users,dc=your,dc=domain" -w "secretsquidpassword" -f "(&(userPrincipalName=%s)(objectClass=Person))" activedirectoryserver
  .
  .SH NOTES
  .
--- 199,205 ----
  a user DN and password to log in as to perform the searches, as in the
  following complex Active Directory example
  .IP
! squid_ldap_auth -P -R -b "dc=your,dc=domain" -D "cn=squid,cn=users,dc=your,dc=domain" -w "secretsquidpassword" -f "(&(userPrincipalName=%s)(objectClass=Person))" activedirectoryserver
  .
  .SH NOTES
  .
Index: squid/helpers/basic_auth/LDAP/squid_ldap_auth.c
diff -c squid/helpers/basic_auth/LDAP/squid_ldap_auth.c:1.21.2.23 squid/helpers/basic_auth/LDAP/squid_ldap_auth.c:1.21.2.24
*** squid/helpers/basic_auth/LDAP/squid_ldap_auth.c:1.21.2.23	Sat Sep 10 18:53:23 2005
--- squid/helpers/basic_auth/LDAP/squid_ldap_auth.c	Wed Sep 28 12:33:42 2005
***************
*** 187,193 ****
      else
  	ld->ld_options &= ~LDAP_OPT_REFERRALS;
  }
! static void 
  squid_ldap_set_timelimit(LDAP * ld, int timelimit)
  {
      ld->ld_timelimit = timelimit;
--- 187,193 ----
      else
  	ld->ld_options &= ~LDAP_OPT_REFERRALS;
  }
! static void
  squid_ldap_set_timelimit(LDAP * ld, int timelimit)
  {
      ld->ld_timelimit = timelimit;
***************
*** 259,265 ****
      }
      if (use_tls) {
  #ifdef LDAP_OPT_X_TLS
!         if (version != LDAP_VERSION3) {
  	    fprintf(stderr, "TLS requires LDAP version 3\n");
  	    exit(1);
  	} else if (ldap_start_tls_s(ld, NULL, NULL) != LDAP_SUCCESS) {
--- 259,265 ----
      }
      if (use_tls) {
  #ifdef LDAP_OPT_X_TLS
! 	if (version != LDAP_VERSION3) {
  	    fprintf(stderr, "TLS requires LDAP version 3\n");
  	    exit(1);
  	} else if (ldap_start_tls_s(ld, NULL, NULL) != LDAP_SUCCESS) {
***************
*** 282,293 ****
  static int
  validUsername(const char *user)
  {
!     const unsigned char *p = (const unsigned char *)user;
  
      /* Leading whitespace? */
      if (isspace(p[0]))
  	return 0;
!     while(p[0] && p[1]) {
  	if (isspace(p[0])) {
  	    /* More than one consequitive space? */
  	    if (isspace(p[1]))
--- 282,293 ----
  static int
  validUsername(const char *user)
  {
!     const unsigned char *p = (const unsigned char *) user;
  
      /* Leading whitespace? */
      if (isspace(p[0]))
  	return 0;
!     while (p[0] && p[1]) {
  	if (isspace(p[0])) {
  	    /* More than one consequitive space? */
  	    if (isspace(p[1]))
***************
*** 581,597 ****
--- 581,603 ----
      return n;
  }
  
+ /* Check the userid & password.
+  * Return 0 on success, 1 on failure
+  */
  static int
  checkLDAP(LDAP * persistent_ld, const char *userid, const char *password, const char *ldapServer, int port)
  {
      char dn[256];
      int ret = 0;
      LDAP *bind_ld = NULL;
+     int rc;
  
      if (!*password) {
  	/* LDAP can't bind with a blank password. Seen as "anonymous"
  	 * and always granted access
  	 */
+ 	if (debug)
+ 	    fprintf(stderr, "Blank password given\n");
  	return 1;
      }
      if (searchfilter) {
***************
*** 599,607 ****
  	char escaped_login[256];
  	LDAPMessage *res = NULL;
  	LDAPMessage *entry;
! 	char *searchattr[] = {LDAP_NO_ATTRS, NULL};
  	char *userdn;
- 	int rc;
  	LDAP *search_ld = persistent_ld;
  
  	if (!search_ld)
--- 605,613 ----
  	char escaped_login[256];
  	LDAPMessage *res = NULL;
  	LDAPMessage *entry;
! 	char *searchattr[] =
! 	{LDAP_NO_ATTRS, NULL};
  	char *userdn;
  	LDAP *search_ld = persistent_ld;
  
  	if (!search_ld)
***************
*** 625,630 ****
--- 631,638 ----
  		/* Everything is fine. This is expected when referrals
  		 * are disabled.
  		 */
+ 		if (debug)
+ 		    fprintf(stderr, "noreferrals && rc == LDAP_PARTIAL_RESULTS\n");
  	    } else {
  		fprintf(stderr, PROGRAM_NAME ": WARNING, LDAP search error '%s'\n", ldap_err2string(rc));
  #if defined(NETSCAPE_SSL)
***************
*** 639,644 ****
--- 647,654 ----
  	}
  	entry = ldap_first_entry(search_ld, res);
  	if (!entry) {
+ 	    if (debug)
+ 		fprintf(stderr, "Ldap search returned nothing\n");
  	    ret = 1;
  	    goto search_done;
  	}
***************
*** 690,696 ****
      return ret;
  }
  
! int 
  readSecret(const char *filename)
  {
      char buf[BUFSIZ];
--- 700,706 ----
      return ret;
  }
  
! int
  readSecret(const char *filename)
  {
      char buf[BUFSIZ];
