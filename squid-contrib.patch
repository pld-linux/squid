diff -urN squid-2.5.STABLE1.org/contrib/config.site squid-2.5.STABLE1/contrib/config.site
--- squid-2.5.STABLE1.org/contrib/config.site	Thu Jan  1 01:00:00 1970
+++ squid-2.5.STABLE1/contrib/config.site	Tue Sep 24 22:28:05 1996
@@ -0,0 +1,46 @@
+# This is file config.site.
+# Set environment variable CONFIG_SITE to this file
+# to get site specific defaults for configure
+# AUTHOR: Markus Gyger
+
+# HP ANSI/ISO C compiler
+: ${CC="cc -Ae"}
+: ${CFLAGS="-O -g"}
+: ${LDFLAGS="${CFLAGS}"}
+
+# Default installation directory layout based on prefix path
+case $prefix in
+/opt/*)  # AT&T SVR4, OSF/1 file system layout defaults
+#   prefix='/opt/<appname>'
+#   exec_prefix='${prefix}'
+#   bindir='${exec_prefix}/bin'
+#   sbindir='${exec_prefix}/sbin'
+    libexecdir='${exec_prefix}/lbin'
+#   datadir='${prefix}/share'
+    sysconfdir='/etc${prefix}'
+    sharedstatedir='/var/share${prefix}'
+    localstatedir='/var${prefix}'
+#   libdir='${exec_prefix}/lib'
+    includedir='${datadir}/include'
+#   oldincludedir='/usr/include'
+    infodir='${datadir}/info'
+    mandir='${datadir}/man'
+    ;;
+
+*)  # GNU, BSD file system directory layout defaults
+#   prefix=/usr/local
+#   exec_prefix='${prefix}'
+#   bindir='${exec_prefix}/bin'
+#   sbindir='${exec_prefix}/sbin'
+#   libexecdir='${exec_prefix}/libexec'
+#   datadir='${prefix}/share'
+#   sysconfdir='${prefix}/etc'
+#   sharedstatedir='${prefix}/com'
+#   localstatedir='${prefix}/var'
+#   libdir='${exec_prefix}/lib'
+#   includedir='${prefix}/include'
+#   oldincludedir='/usr/include'
+#   infodir='${prefix}/info'
+#   mandir='${prefix}/man'
+    ;;
+esac
diff -urN squid-2.5.STABLE1.org/contrib/rredir.c squid-2.5.STABLE1/contrib/rredir.c
--- squid-2.5.STABLE1.org/contrib/rredir.c	Thu Jan  1 01:00:00 1970
+++ squid-2.5.STABLE1/contrib/rredir.c	Sat Sep 14 18:54:47 1996
@@ -0,0 +1,102 @@
+/* $Id$ */
+
+/*
+ * From:    richard@hekkihek.hacom.nl (Richard Huveneers)
+ * To:      squid-users@nlanr.net
+ * Subject: Save 15% on your bandwidth...
+ * Date:    12 Sep 1996 21:21:55 GMT
+ * ===========================================================================
+ * 
+ * I have downloaded the multi-megabyte files from Netscape and Microsoft
+ * that our users like to download from every mirror in the world,
+ * defeating the usual caching.
+ * 
+ * I put these files in a separate directory and installed a basic
+ * redirector for Squid that checks if the file (so hostname and pathname
+ * are disregarded) is present in this directory.
+ * 
+ * After a few days of testing (the redirector looks very stable) it looks
+ * like this is saving us approx. 15% on our cache flow. Also, our own WWW
+ * server has become more popular than ever :)
+ * 
+ * I'm sure this code will be useful to others too, so I've attached it at
+ * the end of this message. Improvements, extensions etc. are welcome.
+ * 
+ * I'm going on holidays now, so I won't be able to respond to e-mail
+ * quickly.
+ * 
+ * Enjoy, Richard.
+ */
+
+/*
+ * rredir - redirect to local directory
+ * 
+ * version 0.1, 7 sep 1996
+ * - initial version (Richard Huveneers <Richard.Huveneers@hekkihek.hacom.nl>)
+ */
+
+#include <stdio.h>
+#include <unistd.h>
+#include <string.h>
+#include <ctype.h>
+
+#define ACCESS_LOCAL_DIR        "/var/lib/httpd/htdocs/local/rredir"
+#define REDIRECT_TO_URL         "http://www.hacom.nl/local/rredir"
+#define BUFFER_SIZE             (16*1024)
+
+int
+main()
+{
+    char buf[BUFFER_SIZE];
+    char *s, *t;
+    int tlu = 0;
+
+    /* make standard output line buffered */
+    if (setvbuf(stdout, NULL, _IOLBF, 0) != 0)
+	return 1;
+
+    /* speed up the access() calls below */
+    if (chdir(ACCESS_LOCAL_DIR) == -1)
+	return 1;
+
+    /* scan standard input */
+    while (fgets(buf, BUFFER_SIZE, stdin) != NULL) {
+	/* check for too long urls */
+	if (strchr(buf, '\n') == NULL) {
+	    tlu = 1;
+	    continue;
+	}
+	if (tlu)
+	    goto dont_redirect;
+
+	/* determine end of url */
+	if ((s = strchr(buf, ' ')) == NULL)
+	    goto dont_redirect;
+	*s = '\0';
+
+	/* determine first character of filename */
+	if ((s = strrchr(buf, '/')) == NULL)
+	    goto dont_redirect;
+	s++;
+
+	/* security: do not redirect to hidden files, the current
+	 * ** directory or the parent directory */
+	if (*s == '.' || *s == '\0')
+	    goto dont_redirect;
+
+	/* map filename to lower case */
+	for (t = s; *t != '\0'; t++)
+	    *t = (char) tolower((int) *t);
+
+	/* check for a local copy of this file */
+	if (access(s, R_OK) == 0) {
+	    (void) printf("%s/%s\n", REDIRECT_TO_URL, s);
+	    continue;
+	}
+      dont_redirect:
+	tlu = 0;
+	(void) printf("\n");
+    }
+
+    return 0;
+}
diff -urN squid-2.5.STABLE1.org/contrib/rredir.pl squid-2.5.STABLE1/contrib/rredir.pl
--- squid-2.5.STABLE1.org/contrib/rredir.pl	Thu Jan  1 01:00:00 1970
+++ squid-2.5.STABLE1/contrib/rredir.pl	Wed Jul 16 22:31:48 1997
@@ -0,0 +1,60 @@
+#!/usr/bin/perl -T -w
+#
+# rredir.pl
+#
+# Author: Peter Eisenhauer <pe@pipetronix.de>
+# First Version: 26. May 1997
+#
+# Description: Direct all request to files who are in a local dir to
+# this directory
+# 
+use File::Basename;
+use URI::URL;
+
+# customization part
+
+# Local Domainame from which no redirects should be done
+$localdomain = 'pipetronix.de';
+# Local domainame qouted for regexps
+$regexlocaldomain = quotemeta($localdomain);
+# Path under which the scripts accesses the local dir (must end with /)
+$access_local_dir='/opt/utils/etc/httpd/htdocs/local-rredir/';
+# Information for the redirected URL (redirect_path must end with /)
+$redirect_scheme = 'http';
+$redirect_host = 'ws-server.pipetronix.de';
+$redirect_path = 'local-rredir/';
+
+# end of customization part
+
+# flush after every print
+$| = 1;
+
+# Process lines of the form 'URL ip-address/fqdn ident method'
+# See release notes of Squid 1.1 for details
+while ( <> ) {
+    ($url, $addr, $fqdn, $ident, $method) = m:(\S*) (\S*)/(\S*) (\S*) (\S*):;
+
+    $url = url $url;
+    $host = lc($url->host);
+
+    # do not process hosts in local domain or unqualified hostnames
+    if ( $host =~ /$regexlocaldomain/ || $host !~ /\./ ) {
+	next;
+    }
+
+    # just the file, without any host or path parts
+    # and just in case: lowercase the file name, so you should make sure
+    # all the files in the local dir are only lowercase !!
+    $file = lc(basename($url->path));
+
+    # look if in local dir, if yes redirect
+    if ( $file && -r $access_local_dir . $file
+	&& $file ne '.' && $file ne '..' ) {
+	$url->scheme($redirect_scheme);
+	$url->host($redirect_host);
+	$url->path($redirect_path . $file);
+    }
+
+} continue {
+    print "$url $addr/$fqdn $ident $method\n"
+}
diff -urN squid-2.5.STABLE1.org/contrib/squid.options squid-2.5.STABLE1/contrib/squid.options
--- squid-2.5.STABLE1.org/contrib/squid.options	Thu Jan  1 01:00:00 1970
+++ squid-2.5.STABLE1/contrib/squid.options	Fri Oct 11 01:30:40 1996
@@ -0,0 +1,13 @@
+#!/sbin/sh
+#
+# Squid Internet Object Cache configuration
+# AUTHOR: Markus Gyger
+# This is file /etc/rc.config.d/squid or /var/config/squid.options
+
+# SQUID:            Set to 1 to enable Squid (HP-UX 10 only)
+# SQUID_OPTIONS:    Options passed to Squid (e.g. "-f .../squid.conf")
+# SQUID_RESPAWN:    Set to 1 to automatically restart squid after failure
+
+SQUID=0
+SQUID_OPTIONS="-s"
+SQUID_RESPAWN=1
diff -urN squid-2.5.STABLE1.org/contrib/squid.rc squid-2.5.STABLE1/contrib/squid.rc
--- squid-2.5.STABLE1.org/contrib/squid.rc	Thu Jan  1 01:00:00 1970
+++ squid-2.5.STABLE1/contrib/squid.rc	Fri Oct 11 01:30:40 1996
@@ -0,0 +1,119 @@
+#!/sbin/sh
+
+# Squid Internet Object Cache startup
+# AUTHOR: Markus Gyger
+# This is squid's startup file /sbin/init.d/squid or /etc/init.d/squid
+
+
+PATH=/opt/squid/bin:/usr/sbin:/usr/bin:/sbin:/bin
+export PATH
+
+
+config()
+{
+    # SGI IRIX 6.2
+    if [ -f /sbin/chkconfig ]
+    then if /sbin/chkconfig squid
+	 then if [ -f /var/config/squid.options ]
+	      then . /var/config/squid.options
+	      fi
+	      SQUID=1
+	 else SQUID=0
+	 fi
+
+    # Digital UNIX
+    elif [ -f /usr/sbin/rcmgr ]
+    then SQUID=`/usr/sbin/rcmgr get SQUID 0`
+	 SQUID_OPTIONS=`/usr/sbin/rcmgr get SQUID_OPTIONS "-s"`
+	 SQUID_RESPAWN=`/usr/sbin/rcmgr get SQUID_RESPAWN 1`
+
+    # HP-UX 10 / Linux
+    elif [ -f /etc/rc.config ]
+    then . /etc/rc.config
+
+    # SUN Solaris 2
+    else SQUID=1
+	 SQUID_OPTIONS="-s"
+	 SQUID_RESPAWN=1
+    fi
+
+    [ 1 = "${SQUID-}" ]
+}
+
+
+respawn()
+{
+    trap "" 1
+    fails=0
+    while [ $fails -le 5 ]
+    do  start=`date +%d%H%M%S`
+	if "$@"
+	then logger -t "$1" -p local4.notice \
+		 "respawn[$$]: Exiting due to shutdown"
+	     return 0
+	fi
+	stop=`date +%d%H%M%S`
+	time=`expr $stop - $start`
+	[ "$time" -gt 10 ] && fails=0
+	fails=`expr $fails + 1`
+    done
+
+    logger -t "$1" -p local4.alert \
+	"respawn[$$]: Exiting due to repeated, frequent failures"
+    return 1
+}
+
+
+case $* in
+start_msg)
+    echo "Start Squid Internet Object Cache"
+    ;;
+
+stop_msg)
+    echo "Stopping Squid Internet Object Cache"
+    ;;
+
+start)
+    config || exit 2  # Squid not enabled
+
+    if whence=`type squid 2>&1`
+    then trap "" 1
+	 if [ 0 = "${SQUID_RESPAWN-}" ]
+	 then         squid ${SQUID_OPTIONS-} &
+	 else respawn squid ${SQUID_OPTIONS-} &
+	 fi
+
+    else echo "ERROR: $whence" >&2
+	 exit 1
+    fi
+    ;;
+
+stop)
+    config || exit 2  # Squid not enabled
+
+    squid ${SQUID_OPTIONS-} -k shutdown || exit 1
+    ;;
+
+reconf*|rotate|int*|debug|check|kill)
+    config
+
+    squid ${SQUID_OPTIONS-} -k "$1"
+    ;;
+
+*)
+    echo "usage: $0 {start|stop|reconfigure|rotate|interrupt|debug|check|kill}" >&2
+    echo "    start        start squid" >&2
+    echo "    stop         clean shutdown" >&2
+    echo "    reconfigure  reread configuration files" >&2
+    echo "    rotate       rotate log files" >&2
+    echo "    interrupt    quick clean shutdown " >&2
+    echo "    debug        toggle debug logging" >&2
+    echo "    check        check for running squid" >&2
+    echo "    kill         terminate squid by brute force" >&2
+
+    exit 1
+    ;;
+esac
+
+[ $? -eq 0 ]  # only 0 and 1 exit values allowed
+exit
diff -urN squid-2.5.STABLE1.org/contrib/url-normalizer.pl squid-2.5.STABLE1/contrib/url-normalizer.pl
--- squid-2.5.STABLE1.org/contrib/url-normalizer.pl	Thu Jan  1 01:00:00 1970
+++ squid-2.5.STABLE1/contrib/url-normalizer.pl	Fri Dec  6 18:54:31 1996
@@ -0,0 +1,51 @@
+#!/usr/local/bin/perl -Tw
+
+# From:    Markus Gyger <mgyger@itr.ch>
+#
+# I'd like to see a redirector which "normalizes" URLs to have
+# a higher chance to get a hit. I didn't see such a redirector,
+# so I thought I would send my little attempt. However, I have
+# no real idea how much CPU time it needs using the LWP modules,
+# but it seems to work.
+
+require 5.003;
+use strict;
+use URI::URL;
+
+$| = 1;  # force a flush after every print on STDOUT
+
+my ($url, $addr, $fqdn, $ident, $method);
+
+while (<>) {
+    ($url, $addr, $fqdn, $ident, $method) = m:(\S*) (\S*)/(\S*) (\S*) (\S*):;
+
+    # "normalize" URL
+    $url = url $url;                    # also removes default port number
+    $url->host(lc $url->host);          # map host name to lower case
+    my $epath = $url->epath;
+    $epath =~ s/%7e/~/ig;               # unescape ~
+    $epath =~ s/(%[\da-f]{2})/\U$1/ig;  # capitalize escape digits
+    if ($url->scheme =~ /^(http|ftp)$/) {
+	$epath =~ s:/\./:/:g;           # safe?
+	$epath =~ s://:/:g;             # safe?
+    }
+    $url->epath($epath);
+
+
+    # ...
+
+
+} continue {
+    print "$url $addr/$fqdn $ident $method\n"
+}
+
+
+BEGIN {
+    unless (URI::URL::implementor('cache_object')) {
+	package cache_object;
+	@cache_object::ISA = (URI::URL::implementor());
+	URI::URL::implementor('cache_object', 'cache_object');
+
+	sub default_port { 3128 }
+    }
+}
diff -urN squid-2.5.STABLE1.org/contrib/user-agents.pl squid-2.5.STABLE1/contrib/user-agents.pl
--- squid-2.5.STABLE1.org/contrib/user-agents.pl	Thu Jan  1 01:00:00 1970
+++ squid-2.5.STABLE1/contrib/user-agents.pl	Fri Dec  6 18:28:56 1996
@@ -0,0 +1,47 @@
+#!/usr/bin/perl
+#
+# John@MCC.ac.uk
+# John@Pharmweb.NET
+
+require "getopts.pl";
+&Getopts('FML:');
+
+open (ACCESS, "/opt/Squid/logs/useragent.0");
+
+while (<ACCESS>) {
+	($host, $timestamp, $agent) = 
+	/^(\S+) \[(.+)\] \"(.+)\"\s/;
+	if ($agent ne '-') {
+		if ($opt_M) {
+		 	$agent =~ tr/\// /;
+			$agent =~ tr/\(/ /;
+		}
+		if ($opt_F) {
+			next unless $seen{$agent}++;
+		} else {
+			@inline=split(/ /, $agent);
+			next unless $seen{$inline[0]}++;
+		}
+	}
+}
+
+$total=0;
+if (!$opt_L) {$opt_L=0}
+
+print "Summary of User-Agent Strings\n(greater than $opt_L percent)\n\n";
+
+foreach $browser (keys(%seen)) {
+        $total=$total+$seen{$browser};
+}
+
+foreach $browser (sort keys(%seen)) {
+	$percent=$seen{$browser}/$total*100;
+	if ($percent >= $opt_L) { write; }
+}
+
+print "\n\nTotal entries in log = $total\n";
+
+format STDOUT =
+@>>>>>>> :@##.####% : @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
+$seen{$browser}, $percent, $browser
+.
